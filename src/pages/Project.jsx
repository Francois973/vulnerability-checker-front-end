import { useState } from "react";
import { useEffect } from "react";
import { useLocation, useParams } from "react-router-dom";
import useProjectChannel from "../hook/useProjectChannel";
import Logo from "../components/Logo";
import Banner from "../components/Banner";
import Loader from "../components/Loader";
import RedCircle from "../components/RedCircle";
import GreenCircle from "../components/GreenCircle";

// Better way to reduce bundle size

function Project() {
  const [project, setProject] = useState();
  const [ecosystems, setEcosystems] = useState({});
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(false);
  const { uuid } = useParams();

  useProjectChannel({
    uuid,
    setVulnerabilities,
    setEcosystems,
    setProject,
  });

  useEffect(() => {
    if (uuid && !project && !loading) {
      const fetchProject = async () => {
        const response = await fetch(
          `http://localhost:3000/api/v1/projects/${uuid}`
        );
        const project = await response.json();
        setProject(project);
        setVulnerabilities(project.vulnerabilities);
        setEcosystems(project.ecosystems);
      };

      fetchProject();
    }
  }, [uuid, project, loading]);

  console.log(vulnerabilities);
  if (!project) {
    return <p>Loading....</p>;
  }

  return (
    <div className="min-h-screen">
      <Logo />
      <div className="flex flex-col gap-y-14 items-center">
        <Banner />
        <div className="pr-4 pl-4 pt-3 pb-3 bg-dark-color w-1/4 text-center rounded-md mb-11">
          <p>Status: {project.status}</p>
        </div>
      </div>
      <span>Filter by ecosystem :</span>
      {Object.entries(ecosystems).map(([ecosystem, status]) => {
        return (
          <div key={ecosystem}>
            <div className="flex flex-row">
              {status === "pending" ? (
                <ul className="pr-5 pl-5 pt-2 pb-2 bg-dark-color w-80 m-auto mb-4 flex flex-row justify-around rounded-md">
                  <li>
                    {ecosystem} - {status}
                  </li>
                  <Loader />
                </ul>
              ) : null}
              {status === "scanning" ? (
                <ul className="pr-5 pl-5 pt-2 pb-2 bg-dark-color w-80 m-auto mb-4 flex flex-row justify-around rounded-md">
                  <li>
                    {ecosystem} - {status}
                  </li>
                  <Loader />
                </ul>
              ) : null}
              {status === "unavailable" ? (
                <ul className="pr-5 pl-5 pt-2 pb-2 bg-dark-color w-80 m-auto mb-4 flex flex-row gap-x-5 rounded-md items-center">
                  <li>
                    {ecosystem} - {status}
                  </li>
                  <RedCircle />
                </ul>
              ) : null}
              {status === "completed" ? (
                <ul className="pr-5 pl-5 pt-2 pb-2 bg-dark-color w-80 m-auto mb-4 flex flex-row gap-x-5 rounded-md items-center">
                  <li>
                    {ecosystem} - {status}
                  </li>
                  <GreenCircle />
                </ul>
              ) : null}
            </div>
            <ul>
              {vulnerabilities
                .filter((v) => v.ecosystem === ecosystem)
                .map((v, i) => (
                  <li key={i}>
                    {v.stack}: {v.summary} ({v.github_version_ranges})
                    {v.severity}
                  </li>
                ))}
            </ul>
          </div>
        );
      })}
    </div>
  );
}

export default Project;
